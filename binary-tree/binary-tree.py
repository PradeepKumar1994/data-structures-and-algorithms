class Binarytree:    def __init__(self):        self.array = [0 for i in range(15)]        self.count = 0        self.queue = []    def inorder_root_followup(self, root):        while(self.array[root] != 0):            print('THis is root',root)            print('THis isn root',self.array[root])            root_previous = root            root = root + root + 2        return root_previous    def inorder_preprocess(self):        length = len(self.array) - 1        root = length        return self.inorder(root)    def inorder(self, root):        while(True):            root = int(root/2)            print(root)            print(self.queue)            if(self.array[root] not in self.queue):                self.queue.append(self.array[root])            root_previous = root            root = root + root + 2            if(root < len(self.array) and self.array[root] != 0):                self.queue.append(self.array[root])            root = root_previous            if(root == 0):                root = self.inorder_root_followup(root)                self.inorder(root)            if(len(self.queue) == len(self.array)):                print(self.queue)                return None    def inorder_(self, root):            print('Root: ',root)                        try:                if(self.array[root]!=None and root < len(self.array)):                    root = root+root+1                    self.inorder_(self.array[root])                    self.queue.append(self.array[root])                    root = root+root+2                    self.inorder_(root)                print(self.queue)            except IndexError:                print(self.queue)            if(root == len(self.array)):                return self.queue    def traverse(self, value, root = None):        if(root == None):            root = 0        if(self.array[root]!= 0):            if(value > self.array[root]):                root = root + root + 2                return self.traverse(value, root)            elif(value < self.array[root]):                root = root + root + 1                return self.traverse(value, root)        elif(self.array[root] == 0):            return root        print(value)        return "This shouldn't be returned"    def insert(self, value):        location = self.traverse(value)        self.array[location] = value        print(self.array)    def print_(self):        print(self.array)        binarytree = Binarytree()binarytree.insert(7)binarytree.insert(20)binarytree.insert(5)binarytree.insert(15)binarytree.insert(10)binarytree.insert(4)binarytree.insert(33)binarytree.insert(2)binarytree.insert(25)binarytree.insert(6)binarytree.print_()binarytree.inorder_(root=0)#binarytree.inorder_preprocess()